{"meta":{"title":"ZpliuBlog","subtitle":null,"description":null,"author":"zpliu","url":"https://zpliu1126.github.io/Blog","root":"/Blog/"},"pages":[{"title":"tags","date":"2019-03-03T05:34:48.000Z","updated":"2019-03-05T04:24:33.442Z","comments":true,"path":"tags/index.html","permalink":"https://zpliu1126.github.io/Blog/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-03-05T09:43:46.000Z","updated":"2019-03-05T09:43:46.211Z","comments":true,"path":"categories/index.html","permalink":"https://zpliu1126.github.io/Blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"【持续更新】关于hexo博客的搭建","slug":"关于hexo博客的搭建","date":"2019-03-05T10:06:07.000Z","updated":"2019-03-05T11:21:19.224Z","comments":true,"path":"archives/d86fd5e9.html","link":"","permalink":"https://zpliu1126.github.io/Blog/archives/d86fd5e9.html","excerpt":"","text":"Quick start关于如何进行安装hexo和一些配置插件的过程我这里就不详细介绍了；大家可以百度网上一大堆，当然我这里推荐一些讲的比较好的博客遇见西门里面介绍了如何进行hexo的安装与主题的优化 插件的配置我使用的是gitment，还是对github比较有好感，具体教程参考：gitment 永久链接的配置借助于hexo-abbrlink插件，安装好之后呢；在博客目录下的配置文件中修改_config.yml文件就ok，具体的修改方式如下1234permalink: archives/:abbrlink.htmlabbrlink: alg: crc32 rep: hex 参考 关于在github二级仓库中构建博客 首先是在博客目录下的配置文件中进行设置 12url: https://zpliu1126.github.io/hexoTestroot: /hexoTest/ 接着就是关于搜素插件如何找到对应文件路径设置 12/*#######设置数据库所在文件*/xhr.open('GET', '/hexoTest/content.json', true); 由于该主题作者 Snippet并没有考虑到这一情况，我是在获取conten.js的路径中进行了修改 对应找到对应的数据文件之后进行路径的构造12/*关于在搜素结果content.json获取数据后加上子repository名构造最后url*/ path: \"hexoTest/\"+post.path, 其实就是一个字符串拼接的过程 关于文章如何进行分类的问题 1.在theme配置文件中打开category和tag标签 2.接着在每一个生成的文章中需要定义好category和tag内容才能进行跳转 3.同时在theme配置文件中可以定义好一些目录的跳转链接 123456789101112131415161718192021 #########文章的开头########## ---title: 关于hexo博客的搭建abbrlink: d86fd5e9date: 2019-03-05 18:06:07category: computerLanguagetag: - JavaScript - html - css---######导航栏##########menu:- page: home url: /hexoTest icon:- page: 计算机程序 url: /hexoTest/categories/computerLanguage/ icon:- page: Bioinformatic url: /hexoTest/categories/Bioinformatic/","categories":[{"name":"computerLanguage","slug":"computerLanguage","permalink":"https://zpliu1126.github.io/Blog/categories/computerLanguage/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zpliu1126.github.io/Blog/tags/JavaScript/"},{"name":"html","slug":"html","permalink":"https://zpliu1126.github.io/Blog/tags/html/"},{"name":"css","slug":"css","permalink":"https://zpliu1126.github.io/Blog/tags/css/"}]},{"title":"本地Blast教程","slug":"本地Blast教程","date":"2019-03-05T10:04:50.000Z","updated":"2019-03-06T01:30:49.638Z","comments":true,"path":"archives/d57c3785.html","link":"","permalink":"https://zpliu1126.github.io/Blog/archives/d57c3785.html","excerpt":"","text":"blast+安装 通过wget 命令直接下载到本地服务器中 1wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.2.30+-x64-linux.tar.gz 对下载好的文件进行解压 1tar -zxvf ncbi-blast-2.2.30+-x64-linux.tar.gz 解压之后，其实就可以使用绝对路径使用blast+了；怎么知道blast的绝对路径呢 123pwd ncbi-blast-2.2.30+-x64-linux.tar.gz/bin ######例如我们得到这样的绝对路径##########/home/local/software/ncbi-blast-2.2.30+-x64-linux/bin/ 这条命令就得到了我们blast可执行程序所在的绝对路径，也就是在电脑上的哪个文件夹 有了绝对路径我们就可以告诉计算机到哪里去找balst程序来执行当执行blastn核苷酸比对程序时直接使用下面的命令就可以执行了1/home/local/software/ncbi-blast-2.2.30+-x64-linux/bin/blastn 添加可执行程序到环境变量中 首先环境变量是啥？环境变量其实就是一个变量，这个变量里面包括一个叫$PATH的变量，里面存储着一些你想告诉计算机的东西。比如我想告诉计算机blast+的所有可执行的程序都放在哪个文件里面，我只需要在$PATH这个变量中加上blast/bin的文件夹；这样当我们在计算机的任何地方想要执行balst的时候只需要按下blastn或者其他命令就行了12echo &quot;export PATH=/home/local/software/ncbi-blast-2.2.30+-x64-linux/bin:\\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc blast的使用构建本地blast库例如要构建核酸库，使用整个CDS构建的基因序列库1makeblastdb -in &quot;CDS文件&quot; -dbtype &quot;nucl&quot; -parse_seqids -out &quot;库名称的前缀&quot; 具体参数的意义可以使用 -help参数查看手册，我就不多做赘述同理构建蛋白库1makeblastdb -in &quot;氨基酸序列文件&quot; -dbtype &quot;prot&quot; -parse_seqids -out &quot;库名称的前缀&quot; 进行序列比对 首先我们需要准备比对的fasta文件，然后一条命令就可以了1blastn -query &quot;需要比对的文件&quot; -db &quot;上一步建好的库的目录加上/库前缀&quot; -evalue 1e-5 -outfmt 6 -out &quot;输出文件&quot; 这里的outfmt是输出文件的格式，包括1-10种格式 具体参数的意义，可以使用–help参数查看","categories":[{"name":"Bioinformatic","slug":"Bioinformatic","permalink":"https://zpliu1126.github.io/Blog/categories/Bioinformatic/"}],"tags":[{"name":"Blast","slug":"Blast","permalink":"https://zpliu1126.github.io/Blog/tags/Blast/"}]},{"title":"模型评估与选择","slug":"模型评估与选择","date":"2019-03-05T09:49:35.000Z","updated":"2019-03-05T09:52:03.231Z","comments":true,"path":"archives/7d1dcda7.html","link":"","permalink":"https://zpliu1126.github.io/Blog/archives/7d1dcda7.html","excerpt":"","text":"","categories":[{"name":"MachineLearning","slug":"MachineLearning","permalink":"https://zpliu1126.github.io/Blog/categories/MachineLearning/"}],"tags":[{"name":"基础","slug":"基础","permalink":"https://zpliu1126.github.io/Blog/tags/基础/"}]},{"title":"Linux基础篇","slug":"Linux","date":"2019-03-05T09:46:11.000Z","updated":"2019-03-05T09:53:14.859Z","comments":true,"path":"archives/53d0684b.html","link":"","permalink":"https://zpliu1126.github.io/Blog/archives/53d0684b.html","excerpt":"","text":"","categories":[{"name":"computerLanguage","slug":"computerLanguage","permalink":"https://zpliu1126.github.io/Blog/categories/computerLanguage/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zpliu1126.github.io/Blog/tags/Linux/"}]},{"title":"Circos其实很简单","slug":"Circos其实很简单","date":"2019-03-05T09:40:46.000Z","updated":"2019-03-05T10:02:58.702Z","comments":true,"path":"archives/87ef918.html","link":"","permalink":"https://zpliu1126.github.io/Blog/archives/87ef918.html","excerpt":"","text":"","categories":[{"name":"Bioinformatic","slug":"Bioinformatic","permalink":"https://zpliu1126.github.io/Blog/categories/Bioinformatic/"}],"tags":[{"name":"Circos学习","slug":"Circos学习","permalink":"https://zpliu1126.github.io/Blog/tags/Circos学习/"}]}]}